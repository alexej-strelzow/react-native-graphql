### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AuthInputType {
  email: String!
  password: String!
}

type AuthPayload {
  accessToken: String
  user: User
}

type Coordinate {
  accuracy: Float!
  altitude: Float!
  altitudeAccuracy: Float!
  heading: Float!
  id: Int!
  latitude: Float!
  longitude: Float!
  speed: Float!
}

input CoordinateCreateOneWithoutLocationInput {
  connect: CoordinateWhereUniqueInput
  connectOrCreate: CoordinateCreateOrConnectWithoutLocationInput
  create: CoordinateCreateWithoutLocationInput
}

input CoordinateCreateOrConnectWithoutLocationInput {
  create: CoordinateCreateWithoutLocationInput!
  where: CoordinateWhereUniqueInput!
}

input CoordinateCreateWithoutLocationInput {
  accuracy: Float!
  altitude: Float!
  altitudeAccuracy: Float!
  createdAt: DateTime
  heading: Float!
  latitude: Float!
  longitude: Float!
  speed: Float!
  updatedAt: DateTime
}

input CoordinateWhereUniqueInput {
  id: Int
}

scalar DateTime

type Location {
  coords: Coordinate!
  id: Int!
  timestamp: Int!
}

input LocationCreateManyWithoutTrackInput {
  connect: [LocationWhereUniqueInput!]
  connectOrCreate: [LocationCreateOrConnectWithoutTrackInput!]
  create: [LocationCreateWithoutTrackInput!]
}

input LocationCreateOrConnectWithoutTrackInput {
  create: LocationCreateWithoutTrackInput!
  where: LocationWhereUniqueInput!
}

input LocationCreateWithoutTrackInput {
  coords: CoordinateCreateOneWithoutLocationInput!
  createdAt: DateTime
  timestamp: Int!
  updatedAt: DateTime
}

input LocationWhereUniqueInput {
  id: Int
}

type Mutation {
  addTrack(data: TrackCreateInput!): Track!
  deleteTrack(where: TrackWhereUniqueInput!): Track
  signin(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
}

type Query {
  me: User
  track(where: TrackWhereUniqueInput!): Track
  tracks(cursor: TrackWhereUniqueInput, skip: Int, take: Int): [Track!]!
}

type Track {
  id: Int!
  locations(
    cursor: LocationWhereUniqueInput
    skip: Int
    take: Int
  ): [Location!]!
  name: String!
  user: User
}

input TrackCreateInput {
  createdAt: DateTime
  locations: LocationCreateManyWithoutTrackInput
  name: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutTrackInput
}

input TrackWhereUniqueInput {
  id: Int
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  password: String!
}

input UserCreateOneWithoutTrackInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTrackInput
  create: UserCreateWithoutTrackInput
}

input UserCreateOrConnectWithoutTrackInput {
  create: UserCreateWithoutTrackInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTrackInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
