/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as prisma from './../../node_modules/.prisma/client/index';
import { Context as ctx } from './../types';

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>;
    model: NexusPrisma<TypeName, 'model'>;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AuthInputType: {
    // input type
    email: string; // String!
    password: string; // String!
  };
  CoordinateCreateOneWithoutLocationInput: {
    // input type
    connect?: NexusGenInputs['CoordinateWhereUniqueInput'] | null; // CoordinateWhereUniqueInput
    connectOrCreate?:
      | NexusGenInputs['CoordinateCreateOrConnectWithoutLocationInput']
      | null; // CoordinateCreateOrConnectWithoutLocationInput
    create?: NexusGenInputs['CoordinateCreateWithoutLocationInput'] | null; // CoordinateCreateWithoutLocationInput
  };
  CoordinateCreateOrConnectWithoutLocationInput: {
    // input type
    create: NexusGenInputs['CoordinateCreateWithoutLocationInput']; // CoordinateCreateWithoutLocationInput!
    where: NexusGenInputs['CoordinateWhereUniqueInput']; // CoordinateWhereUniqueInput!
  };
  CoordinateCreateWithoutLocationInput: {
    // input type
    accuracy: number; // Float!
    altitude: number; // Float!
    altitudeAccuracy: number; // Float!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    heading: number; // Float!
    latitude: number; // Float!
    longitude: number; // Float!
    speed: number; // Float!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  };
  CoordinateWhereUniqueInput: {
    // input type
    id?: number | null; // Int
  };
  LocationCreateManyWithoutTrackInput: {
    // input type
    connect?: NexusGenInputs['LocationWhereUniqueInput'][] | null; // [LocationWhereUniqueInput!]
    connectOrCreate?:
      | NexusGenInputs['LocationCreateOrConnectWithoutTrackInput'][]
      | null; // [LocationCreateOrConnectWithoutTrackInput!]
    create?: NexusGenInputs['LocationCreateWithoutTrackInput'][] | null; // [LocationCreateWithoutTrackInput!]
  };
  LocationCreateOrConnectWithoutTrackInput: {
    // input type
    create: NexusGenInputs['LocationCreateWithoutTrackInput']; // LocationCreateWithoutTrackInput!
    where: NexusGenInputs['LocationWhereUniqueInput']; // LocationWhereUniqueInput!
  };
  LocationCreateWithoutTrackInput: {
    // input type
    coords: NexusGenInputs['CoordinateCreateOneWithoutLocationInput']; // CoordinateCreateOneWithoutLocationInput!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    timestamp: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  };
  LocationWhereUniqueInput: {
    // input type
    id?: number | null; // Int
  };
  TrackCreateInput: {
    // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    locations?: NexusGenInputs['LocationCreateManyWithoutTrackInput'] | null; // LocationCreateManyWithoutTrackInput
    name: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    user?: NexusGenInputs['UserCreateOneWithoutTrackInput'] | null; // UserCreateOneWithoutTrackInput
  };
  TrackWhereUniqueInput: {
    // input type
    id?: number | null; // Int
  };
  UserCreateOneWithoutTrackInput: {
    // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    connectOrCreate?:
      | NexusGenInputs['UserCreateOrConnectWithoutTrackInput']
      | null; // UserCreateOrConnectWithoutTrackInput
    create?: NexusGenInputs['UserCreateWithoutTrackInput'] | null; // UserCreateWithoutTrackInput
  };
  UserCreateOrConnectWithoutTrackInput: {
    // input type
    create: NexusGenInputs['UserCreateWithoutTrackInput']; // UserCreateWithoutTrackInput!
    where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
  };
  UserCreateWithoutTrackInput: {
    // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  };
  UserWhereUniqueInput: {
    // input type
    email?: string | null; // String
    id?: number | null; // Int
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenObjects {
  AuthPayload: {
    // root type
    accessToken?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  };
  Coordinate: prisma.Coordinate;
  Location: prisma.Location;
  Mutation: {};
  Query: {};
  Track: prisma.Track;
  User: prisma.User;
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  AuthPayload: {
    // field return type
    accessToken: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  };
  Coordinate: {
    // field return type
    accuracy: number; // Float!
    altitude: number; // Float!
    altitudeAccuracy: number; // Float!
    heading: number; // Float!
    id: number; // Int!
    latitude: number; // Float!
    longitude: number; // Float!
    speed: number; // Float!
  };
  Location: {
    // field return type
    coords: NexusGenRootTypes['Coordinate']; // Coordinate!
    id: number; // Int!
    timestamp: number; // Int!
  };
  Mutation: {
    // field return type
    addTrack: NexusGenRootTypes['Track']; // Track!
    deleteTrack: NexusGenRootTypes['Track'] | null; // Track
    signin: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  };
  Query: {
    // field return type
    me: NexusGenRootTypes['User'] | null; // User
    track: NexusGenRootTypes['Track'] | null; // Track
    tracks: NexusGenRootTypes['Track'][]; // [Track!]!
  };
  Track: {
    // field return type
    id: number; // Int!
    locations: NexusGenRootTypes['Location'][]; // [Location!]!
    name: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  };
  User: {
    // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
    password: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  AuthPayload: {
    // field return type name
    accessToken: 'String';
    user: 'User';
  };
  Coordinate: {
    // field return type name
    accuracy: 'Float';
    altitude: 'Float';
    altitudeAccuracy: 'Float';
    heading: 'Float';
    id: 'Int';
    latitude: 'Float';
    longitude: 'Float';
    speed: 'Float';
  };
  Location: {
    // field return type name
    coords: 'Coordinate';
    id: 'Int';
    timestamp: 'Int';
  };
  Mutation: {
    // field return type name
    addTrack: 'Track';
    deleteTrack: 'Track';
    signin: 'AuthPayload';
    signup: 'AuthPayload';
  };
  Query: {
    // field return type name
    me: 'User';
    track: 'Track';
    tracks: 'Track';
  };
  Track: {
    // field return type name
    id: 'Int';
    locations: 'Location';
    name: 'String';
    user: 'User';
  };
  User: {
    // field return type name
    createdAt: 'DateTime';
    email: 'String';
    id: 'Int';
    name: 'String';
    password: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    addTrack: {
      // args
      data: NexusGenInputs['TrackCreateInput']; // TrackCreateInput!
    };
    deleteTrack: {
      // args
      where: NexusGenInputs['TrackWhereUniqueInput']; // TrackWhereUniqueInput!
    };
    signin: {
      // args
      email: string; // String!
      password: string; // String!
    };
    signup: {
      // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    };
  };
  Query: {
    track: {
      // args
      where: NexusGenInputs['TrackWhereUniqueInput']; // TrackWhereUniqueInput!
    };
    tracks: {
      // args
      cursor?: NexusGenInputs['TrackWhereUniqueInput'] | null; // TrackWhereUniqueInput
      skip?: number | null; // Int
      take?: number | null; // Int
    };
  };
  Track: {
    locations: {
      // args
      cursor?: NexusGenInputs['LocationWhereUniqueInput'] | null; // LocationWhereUniqueInput
      skip?: number | null; // Int
      take?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
